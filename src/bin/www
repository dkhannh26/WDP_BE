#!/usr/bin/env node

/**
 * Module dependencies.
 */

// const port = process.env.PORT || 8080;
require("dotenv").config();
const { Server } = require("socket.io");
const connection = require("../config/database");
var app = require("../app");
var debug = require("debug")("back-end:server");
var http = require("http");
const jwt = require("jsonwebtoken");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "8080");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  },
});

io.on("connection", (socket) => {
  const token = socket.handshake.query.token;

  if (!token) {
    console.log("No token provided by client:", socket.id);
    socket.disconnect();
    return;
  }

  try {
    const { id, username } = jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);
    socket.join(id); // Gắn socket vào room có tên là accountId
    console.log(`User ${username} connected and joined room ${id}`);

    socket.on("disconnect", () => {
      console.log(`Client disconnected: ${username}`);
    });
  } catch (err) {
    console.error("JWT Error:", err.message);
    socket.disconnect();
  }
});
var notificationRouter = require("../routes/notification")(io);

app.use("/notification", notificationRouter);

/**
 * Listen on provided port, on all network interfaces.
 */

(async () => {
  try {
    //test connection
    await connection();
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
    console.log(`Example app listening on port ${port}`);
  } catch (error) {
    console.log("Error: " + error);
  }
})();

// server.listen(port);

// server.on("error", onError);
// server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
